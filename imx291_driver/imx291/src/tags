!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACK_PRUMEM_WORD_OFFSET	camctrl.c	23;"	d	file:
ADDEND1	main_imx291.c	93;"	d	file:
ADDEND2	main_imx291.c	94;"	d	file:
ADDEND3	main_imx291.c	95;"	d	file:
ARM_PRU_ACK	camctrl.c	24;"	d	file:
ARM_PRU_ACK_OFFSET	camctrl.c	22;"	d	file:
ARM_PRU_NACK	camctrl.c	25;"	d	file:
AddrVal	i2c.h	/^} AddrVal;$/;"	t	typeref:struct:addr_val
BUFSIZE	main_imx291.c	101;"	d	file:
CAMCTRL_H	camctrl.h	2;"	d
CAM_ADDR	unused/camctrl.c	29;"	d	file:
CHUNKSIZE	camctrl.c	20;"	d	file:
DBG_PRINT	unused/camctrl.c	31;"	d	file:
DDR_ACK_OFFSET	camctrl.c	36;"	d	file:
DDR_BASEADDR	camctrl.c	33;"	d	file:
DDR_DATA_OFFSET	camctrl.c	48;"	d	file:
DDR_NUMFRAMES_OFFSET	camctrl.c	39;"	d	file:
DDR_OFFSET_0	camctrl.c	45;"	d	file:
DDR_physical	camctrl.c	/^static uint32_t *DDR_physical; \/\/ physical device ddr address$/;"	v	file:
DIAG_CORRECTION	main_imx291.c	97;"	d	file:
FRAMES_PER_TRANSFER	camctrl.h	6;"	d
HISTOGRAM_LENGTH	main_imx291.c	99;"	d	file:
I2CBUS	unused/camctrl.c	28;"	d	file:
I2C_H	i2c.h	2;"	d
MAXVALUE	camctrl.h	7;"	d
NUMFRAMES_PRU_WORD_OFFSET	camctrl.c	28;"	d	file:
OFFSET_DDR	camctrl.c	57;"	d	file:
OFFSET_SHAREDRAM	camctrl.c	51;"	d	file:
PRUSS0_SHARED_DATARAM	camctrl.c	53;"	d	file:
PRUSS1_SHARED_DATARAM	camctrl.c	54;"	d	file:
PRU_NOT_READY	camctrl.c	42;"	d	file:
PRU_NUM	OE.c	24;"	d	file:
PRU_NUM0	camctrl.c	17;"	d	file:
PRU_NUM1	camctrl.c	18;"	d	file:
PRU_READY	camctrl.c	41;"	d	file:
PRU_READY_WORD_OFFSET	camctrl.c	31;"	d	file:
READ_INVALID	camctrl.c	61;"	d	file:
READ_VALID	camctrl.c	60;"	d	file:
ackPru	camctrl.c	/^static void ackPru() {$/;"	f	file:
addr	i2c.h	/^    uint16_t addr;$/;"	m	struct:addr_val
addr_val	i2c.h	/^typedef struct addr_val {$/;"	s
arrayMean	main_imx291.c	/^static uint8_t arrayMean(uint8_t *arr, int size) {$/;"	f	file:
buffer	i2c.c	/^static const gchar *buffer;$/;"	v	file:
cam_id_dump	unused/camctrl.c	/^void cam_id_dump(void)$/;"	f
cam_init	unused/camctrl.c	/^cam_init(void)$/;"	f
cam_reg_read	unused/camctrl.c	/^unsigned char cam_reg_read(unsigned char addr, unsigned char reg)$/;"	f
cam_trigger	unused/camctrl.c	/^int cam_trigger() {$/;"	f
ceiling	main_imx291.c	/^uint8_t ceiling = 255;$/;"	v
check_camera_running	imx291.c	/^int check_camera_running() {$/;"	f
check_gain	imx291.c	/^int check_gain() {$/;"	f
checkerboardEvenAverage	main_imx291.c	/^static uint8_t checkerboardEvenAverage = 0;$/;"	v	file:
checkerboardOddAverage	main_imx291.c	/^static uint8_t checkerboardOddAverage = 0;$/;"	v	file:
clientCommands	camctrl.h	/^} clientCommands;$/;"	t	typeref:struct:__anon1
concatStr	main_imx291.c	/^static char *concatStr(char *str1, char *str2) {$/;"	f	file:
conditionFrame	main_imx291.c	/^static void conditionFrame(uint8_t *src, int bgSubtract) {$/;"	f	file:
config_pru	camctrl.c	/^int config_pru(int initial_config, uint32_t numFrames) {$/;"	f
configure	camctrl.h	/^    uint32_t configure;$/;"	m	struct:__anon1
ddrMem	camctrl.c	/^static void *ddrMem;$/;"	v	file:
delay_ms	i2c.c	/^int delay_ms(unsigned int msec)$/;"	f
delay_ms	unused/i2cfunc.c	/^int delay_ms(unsigned int msec)$/;"	f
diagAverages	main_imx291.c	/^static void diagAverages(uint8_t *arrA) {$/;"	f	file:
end	unused/timer.c	/^static clock_t start, end;$/;"	v	file:
exposure	camctrl.c	/^void exposure(uint8_t *frameptr, int framesize) {$/;"	f
exposureWrite32	main_imx291.c	/^static void exposureWrite32(char *fname, uint32_t *arr, int arrSize) {$/;"	f	file:
file	i2c.c	/^static int file;$/;"	v	file:
filename	i2c.c	/^static char filename[40];$/;"	v	file:
frame	main_imx291.c	/^uint8_t *frame; \/\/ frame buffer$/;"	v
frameSum	main_imx291.c	/^uint32_t *frameSum; \/\/histogram of values of all pixels$/;"	v
gain	camctrl.h	/^    uint32_t gain;$/;"	m	struct:__anon1
i2c_close	unused/i2cfunc.c	/^int i2c_close(int handle)$/;"	f
i2c_comm_buf	i2c.c	/^static uint8_t i2c_comm_buf[] = {0, 0, 0};$/;"	v	file:
i2c_open	unused/i2cfunc.c	/^int i2c_open(unsigned char bus, unsigned char addr)$/;"	f
i2c_read	unused/i2cfunc.c	/^int i2c_read(int handle, unsigned char* buf, unsigned int length)$/;"	f
i2c_read_byte	unused/i2cfunc.c	/^int i2c_read_byte(int handle, unsigned char* val)$/;"	f
i2c_read_no_ack	unused/i2cfunc.c	/^int i2c_read_no_ack(int handle, $/;"	f
i2c_write	unused/i2cfunc.c	/^int i2c_write(int handle, unsigned char* buf, unsigned int length)$/;"	f
i2c_writeArr	i2c.c	/^int i2c_writeArr(AddrVal *regStructArr) {$/;"	f
i2c_write_byte	unused/i2cfunc.c	/^int i2c_write_byte(int handle, unsigned char val)$/;"	f
i2c_write_ignore_nack	unused/i2cfunc.c	/^int i2c_write_ignore_nack(int handle,$/;"	f
i2c_write_read	unused/i2cfunc.c	/^int i2c_write_read(int handle,$/;"	f
i2ch	unused/camctrl.c	/^int i2ch; \/\/ i2c handle$/;"	v
imx291_ADBIT	imx291.h	16;"	d
imx291_ADBIT1	imx291.h	52;"	d
imx291_ADBIT2	imx291.h	55;"	d
imx291_ADBIT3	imx291.h	56;"	d
imx291_ADDR	imx291.h	64;"	d
imx291_ADDR_STR	imx291.h	63;"	d
imx291_BLACK_LEVEL	unused/camctrl.h	17;"	d
imx291_BLKLEVEL1	imx291.h	22;"	d
imx291_BLKLEVEL2	imx291.h	23;"	d
imx291_CHIP_ENABLE	unused/camctrl.h	16;"	d
imx291_CHIP_VERSION	unused/camctrl.h	1;"	d
imx291_COLUMN_SKIP	unused/camctrl.h	23;"	d
imx291_COLUMN_START	unused/camctrl.h	3;"	d
imx291_FDG_SEL	imx291.h	21;"	d
imx291_FRAME_RESTART	unused/camctrl.h	10;"	d
imx291_FRSEL	imx291.h	20;"	d
imx291_GAIN	imx291.h	24;"	d
imx291_GLOBAL_GAIN	unused/camctrl.h	15;"	d
imx291_GLOBAL_GAIN_STR	imx291.h	8;"	d
imx291_H	imx291.h	2;"	d
imx291_HMAX1	imx291.h	28;"	d
imx291_HMAX2	imx291.h	29;"	d
imx291_HORIZONTAL_BLANKING	unused/camctrl.h	6;"	d
imx291_HREVERSE	imx291.h	18;"	d
imx291_INCKSEL1	imx291.h	48;"	d
imx291_INCKSEL2	imx291.h	49;"	d
imx291_INCKSEL3	imx291.h	50;"	d
imx291_INCKSEL4	imx291.h	51;"	d
imx291_INCKSEL5	imx291.h	53;"	d
imx291_INCKSEL6	imx291.h	54;"	d
imx291_MAX_HEIGHT	imx291.h	60;"	d
imx291_MAX_HEIGHT	unused/camctrl.h	20;"	d
imx291_MAX_WIDTH	imx291.h	59;"	d
imx291_MAX_WIDTH	unused/camctrl.h	19;"	d
imx291_MIN_HEIGHT	unused/camctrl.h	22;"	d
imx291_MIN_WIDTH	unused/camctrl.h	21;"	d
imx291_ODBIT	imx291.h	41;"	d
imx291_OPORTSEL	imx291.h	42;"	d
imx291_OUTPUT_CONTROL	unused/camctrl.h	8;"	d
imx291_READ_OPTIONS1	unused/camctrl.h	13;"	d
imx291_READ_OPTIONS2	unused/camctrl.h	14;"	d
imx291_REGHOLD	imx291.h	12;"	d
imx291_RESET	unused/camctrl.h	12;"	d
imx291_ROW_SKIP	imx291.h	61;"	d
imx291_ROW_SKIP	unused/camctrl.h	24;"	d
imx291_ROW_START	unused/camctrl.h	2;"	d
imx291_SHS1a	imx291.h	30;"	d
imx291_SHS1b	imx291.h	31;"	d
imx291_SHUTTER_DELAY	unused/camctrl.h	11;"	d
imx291_SHUTTER_WIDTH	unused/camctrl.h	9;"	d
imx291_STANDBY	imx291.h	11;"	d
imx291_SW_RESET	imx291.h	14;"	d
imx291_VERTICAL_BLANKING	unused/camctrl.h	7;"	d
imx291_VMAX1	imx291.h	25;"	d
imx291_VMAX2	imx291.h	26;"	d
imx291_VMAX3	imx291.h	27;"	d
imx291_VREVERSE	imx291.h	17;"	d
imx291_WINDMODE	imx291.h	19;"	d
imx291_WINDOW_HEIGHT	unused/camctrl.h	4;"	d
imx291_WINDOW_WIDTH	unused/camctrl.h	5;"	d
imx291_WINPH1	imx291.h	37;"	d
imx291_WINPH2	imx291.h	38;"	d
imx291_WINPV1	imx291.h	33;"	d
imx291_WINPV2	imx291.h	34;"	d
imx291_WINWH1	imx291.h	39;"	d
imx291_WINWH2	imx291.h	40;"	d
imx291_WINWV1	imx291.h	35;"	d
imx291_WINWV2	imx291.h	36;"	d
imx291_WINWV_OB	imx291.h	32;"	d
imx291_XHSLING	imx291.h	44;"	d
imx291_XHSOUTSEL	imx291.h	47;"	d
imx291_XMSTA	imx291.h	13;"	d
imx291_XVSLING	imx291.h	43;"	d
imx291_XVSOUTSEL	imx291.h	46;"	d
imx291_i2c_writeArr	imx291.c	/^static int imx291_i2c_writeArr(AddrVal *regStructArr) {$/;"	f	file:
imx291_init_readout	imx291.c	/^void imx291_init_readout(uint16_t gain) {$/;"	f
imx291_reset	imx291.c	/^static void imx291_reset(void) {$/;"	f	file:
isolated2DHistogram	main_imx291.c	/^uint32_t *isolated2DHistogram; \/\/row-by-row histogram of values of isolated pixels$/;"	v
isolatedEventsBuffer	main_imx291.c	/^uint8_t *isolatedEventsBuffer; \/\/ average of all the frames$/;"	v
isolatedHisto	main_imx291.c	/^uint32_t *isolatedHisto; \/\/histogram of value sof isolated pixels$/;"	v
lowerBound	main_imx291.c	/^uint8_t lowerBound = 0;$/;"	v
lower_bound	camctrl.h	/^    uint32_t lower_bound;$/;"	m	struct:__anon1
main	OE.c	/^int main(int argc, char **argv) {$/;"	f
main	main_imx291.c	/^int main (int argc, char **argv)$/;"	f
main	unused/camctrl.c	/^int main(int argc, char **argv) {$/;"	f
main	unused/timer.c	/^int main() {$/;"	f
makeHistogramsAndSum	main_imx291.c	/^void makeHistogramsAndSum(int bgSubtract, int indx) {$/;"	f
masked	main_imx291.c	/^struct masked {$/;"	s	file:
masked_cols	main_imx291.c	/^struct masked masked_cols = {0, {}};$/;"	v	typeref:struct:masked
mem_fd	camctrl.c	/^static int mem_fd;$/;"	v	file:
nameBuffer	main_imx291.c	/^char nameBuffer[BUFSIZE];$/;"	v
nexposures	camctrl.h	/^    uint32_t nexposures;$/;"	m	struct:__anon1
params_1280x1024	unused/camctrl.c	/^const unsigned char params_1280x1024[]={$/;"	v
params_1280x1024_continuous	imx291.c	/^AddrVal params_1280x1024_continuous[] = {$/;"	v
pixelsHisto	main_imx291.c	/^uint32_t *pixelsHisto; \/\/histogram of values of all pixels$/;"	v
pru_allocate_ddr_memory	camctrl.c	/^static int pru_allocate_ddr_memory()$/;"	f	file:
pru_cleanup	OE.c	/^static int pru_cleanup(void) {$/;"	f	file:
pru_exit	camctrl.c	/^void pru_exit(void) {$/;"	f
pru_setup	OE.c	/^static int pru_setup(const char * const path) {$/;"	f	file:
pru_start	camctrl.c	/^void pru_start(void) {$/;"	f
read8	i2c.c	/^uint16_t read8(uint16_t regAddr, uint8_t dev_addr) {$/;"	f
rowNums	main_imx291.c	/^    int rowNums[];\/\/ = {167, 552, 1004, 13, 202};$/;"	m	struct:masked	file:
sendDDRbase	camctrl.c	/^static void sendDDRbase() {$/;"	f	file:
send_pru_ready_signal	camctrl.c	/^void send_pru_ready_signal() {$/;"	f
sensors_ADC_init	i2c.c	/^void sensors_ADC_init(uint16_t addr) {$/;"	f
set_camera_lock	imx291.c	/^int set_camera_lock() {$/;"	f
size	main_imx291.c	/^    int size;$/;"	m	struct:masked	file:
start	unused/timer.c	/^static clock_t start, end;$/;"	v	file:
subArrays	main_imx291.c	/^void subArrays(uint8_t *arr1, uint8_t *arr2, int size) {$/;"	f
subConstant	main_imx291.c	/^static void subConstant(uint8_t *arr, uint8_t tosub, int size) {$/;"	f	file:
subtractDiagBias	main_imx291.c	/^static void subtractDiagBias(uint8_t *arrA, int bgSubtract) {$/;"	f	file:
subtractRows	main_imx291.c	/^static void subtractRows(uint8_t *arrA, int n, int m) {$/;"	f	file:
threshold	camctrl.h	/^    uint32_t threshold;$/;"	m	struct:__anon1
threshold	main_imx291.c	/^uint8_t threshold; $/;"	v
transpose	main_imx291.c	/^static void transpose(uint8_t *arrA, uint8_t *arrB, int n, int m) {$/;"	f	file:
update2DHisto	main_imx291.c	/^void update2DHisto(uint8_t *frame, uint32_t *histo) {$/;"	f
upperBound	main_imx291.c	/^uint8_t upperBound = 255;$/;"	v
upper_bound	camctrl.h	/^    uint32_t upper_bound;$/;"	m	struct:__anon1
usage	main_imx291.c	/^static void usage(char *name) {$/;"	f	file:
val	i2c.h	/^    uint8_t val;$/;"	m	struct:addr_val
wait_pru1_complete	camctrl.c	/^void wait_pru1_complete(void) {$/;"	f
write8	i2c.c	/^void write8(uint16_t regAddr, uint8_t value) {$/;"	f
zeroColumns	main_imx291.c	/^void zeroColumns(uint8_t *arr, int *indices, int size) {$/;"	f
