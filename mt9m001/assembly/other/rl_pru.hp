// *
// * PRU_memAccess_DDR_PRUsharedRAM.hp
// *
// * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
// *
// *
// *  Redistribution and use in source and binary forms, with or without
// *  modification, are permitted provided that the following conditions
// *  are met:
// *
// *    Redistributions of source code must retain the above copyright
// *    notice, this list of conditions and the following disclaimer.
// *
// *    Redistributions in binary form must reproduce the above copyright
// *    notice, this list of conditions and the following disclaimer in the
// *    documentation and/or other materials provided with the
// *    distribution.
// *
// *    Neither the name of Texas Instruments Incorporated nor the names of
// *    its contributors may be used to endorse or promote products derived
// *    from this software without specific prior written permission.
// *
// *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// *
// *

// *
// * ============================================================================
// * Copyright (c) Texas Instruments Inc 2010-12
// *
// * Use of this software is controlled by the terms and conditions found in the
// * license agreement under which this software has been supplied or provided.
// * ============================================================================
// *


// *****************************************************************************/
// file:   PRU_memAccess_DDR_PRUsharedRAM.hp
//
// brief:  PRU_memAccess_DDR_PRUsharedRAM assembly constants.
//
//
//  (C) Copyright 2012, Texas Instruments, Inc
//
//  author     M. Watkins
// *****************************************************************************/


#ifndef _PRU_memAccess_DDR_PRUsharedRAM_HP_
#define _PRU_memAccess_DDR_PRUsharedRAM_HP_


// ***************************************
// *      Global Macro definitions       *
// ***************************************

// Refer to this mapping in the file - \prussdrv\include\pruss_intc_mapping.h
#define PRU0_PRU1_INTERRUPT     17
#define PRU1_PRU0_INTERRUPT     18
#define PRU0_ARM_INTERRUPT      19
#define PRU1_ARM_INTERRUPT      20
#define ARM_PRU0_INTERRUPT      21
#define ARM_PRU1_INTERRUPT      22

#define CONST_PRUCFG         C4
#define CONST_PRUDRAM        C24
#define CONST_PRUSHAREDRAM   C28
#define CONST_DDR            C31

//THIS IS SPECIFIC TO PRU1:
// Address for the Constant table Block Index Register (CTBIR)
#define CTBIR          0x24020

// Address for the Constant table Programmable Pointer Register 0(CTPPR_0)
#define CTPPR_0         0x24028 //Specific to PRU 1

// Address for the Constant table Programmable Pointer Register 1(CTPPR_1)
#define CTPPR_1         0x2402C //Specific to PRU 1

 
#define PRU0_CTRL            0x22000 // base address for pru 0 constant table
#define PRU1_CTRL            0x24000 // base address for pru 1 constant table
#define CTPPR0               0x28 // offset for programmable pointer register 0
#define CTPPR1               0x2C // offset for programmable pointer register 1


// pin mappings
// inputs
#define PIXCLK r31.t13 // p8_20
#define FV r31.t8 // p8_27
#define LV r31.t9 // p8_29
#define PIX1 r31.t1 // p9_29
#define PIX0 r31.t2 // p9_30
#define PIX10_2 r31.b0 // p8_39 - p8_46
#define FV_N 8
#define LV_N 9
#define PIX_N 13

// outputs
#define EXPOSURE r30.t12 // p8_21. This output currently does not work
#define OE r30.t15 // p8_11, must be controlled from pru0
#define SYSCLK r30.t10 // p8_28

// size in bytes of buffer to share with ARM, divided by 0x10000
#define DDR_BUF_SIZE 0x40 // buf size: 0x400000
#define DELAYCOUNT 100000000
#define CHUNKSIZE 64 // TODO: why 60 and not 64?
#define NUMCHUNKS 10000000
#define DDR_INVALID 2
// offset in shared pru mem for data transfer ack from arm
#define ARM_PRU_ACK_OFFSET 4
#define ARM_PRU_ACK 1
#define ARM_PRU_NACK 0

#define FRAMES_PER_TRANSFER 1 // number of frames at a time for arm to copy
#define THRESHOLD 26
#define DIAG_CORRECTION 8

#define DDR_OFFSET 8 // offset to data region in ddr
#define NUM_FRAMES_OFFSET 8 // offset to field in local pru mem from which to initialize number_frames
// byte location in pru data ram location for encoded data. Initialize encoding_dst to this
#define ENCODING_PRUMEM_BASE 4 
#define DDR_READSIZE_OFFSET 4


//free regs:  
// counter to keep track of even and odd indices. initialized to 0, 
// increments by 1 every chunk (assumed to be 64 bytes) and resets
// to 0 once it reaches 40 = 0x28 (equivalent to two rows)
#define diag_counter r6 
#define diag_state r26 // to store difference between ddr_pointer and ddr base address

#define ddr_base r3
#define pr0ack r7
#define transfer_ready r8
#define data_start r9
#define number_frames r25 // complement of frame_counter

// regs to store state of run length encoding
#define encoding_dst r5
// this HAS to be r0 since that is the reg reserved for register count mode
// in the load/store instructions
#define encoded_size r0 
#define runlen_status r2
#define runlen_counter r4

#define ddr_pointer r27
#define frame_counter r28 // complement of number_frames
#define var1 r29

.macro  LD32
.mparam dst,src
    LBBO    dst,src,#0x00,4
.endm

.macro  LD16
.mparam dst,src
    LBBO    dst,src,#0x00,2
.endm

.macro  LD8
.mparam dst,src
    LBBO    dst,src,#0x00,1
.endm

.macro ST32
.mparam src,dst
    SBBO    src,dst,#0x00,4
.endm

.macro ST16
.mparam src,dst
    SBBO    src,dst,#0x00,2
.endm

.macro ST8
.mparam src,dst
    SBBO    src,dst,#0x00,1
.endm

.macro NOP
NOP:
        ADD     r0, r0, 0
.endm


.macro INIT_NUM_FRAMES
// initialize number_frames from the value written to DDR by host
INIT_NUM_FRAMES:
        MOV     r1, 0
        LBBO    number_frames, r1, NUM_FRAMES_OFFSET, 4
.endm

// ***************************************
// *    Global Structure Definitions     *
// ***************************************

.struct Global
    .u32 regPointer
    .u32 regVal
.ends


// ***************************************
// *     Global Register Assignments     *
// ***************************************

.assign Global, r2, *, global

#endif //_PRU_memAccess_DDR_PRUsharedRAM_

//0: pr0ack
//4: transfer_ready
//CHUNKSIZE + 8: temporary storage used for incrementing ddr_pointer
